---
name: access_vnc_with_poor_password
description: |
  This TTP demonstrates how an attacker can access a VNC server with a poor password in a Kubernetes cluster.
  The TTP deploys a headless VNC server in the cluster and then attempts to access it using a known weak password.
args:
  - name: artifacts_dir
    description: The directory to store the downloaded tools.
    default: /tmp
  - name: eks_cluster
    description: Target k8s cluster is running on EKS.
    default: true
  - name: target_cluster
    description: The target k8s cluster.
  - name: target_ns
    description: The target namespace in the cluster.
    default: default
  - name: target_region
    description: The region the target EKS cluster is in
    default: us-east-1
  - name: vnc_image
    description: The container image to use for the VNC server.
    default: consol/rocky-xfce-vnc
  - name: vnc_password
    description: The weak password to use for accessing the VNC server.
    default: vncpassword
  - name: vnc_port
    description: The port on which the VNC server is exposed.
    default: 5901
  - name: vnc_server
    description: The hostname or IP address of the VNC server.
    default: localhost
  - name: vnc_username
    description: The username to use for accessing the VNC server.
    default: root
requirements:
  platforms:
    - os: linux
    - os: darwin
mitre:
  tactics:
    - TA0004 Privilege Escalation
    - TA0007 Discovery
  techniques:
    - T1552 Unsecured Credentials
    - T1087 Account Discovery

steps:
  {{ if .Args.eks_cluster }}
  - name: aws_connector
    description: This step invokes the setup_cloud_env action.
    ttp: //helpers/cloud/aws/validate-aws-env-configured.yaml
    args:
      region: "{{ .Args.target_region }}"

  - name: setup_kubeconfig_for_eks
    description: Set up kubeconfig for EKS cluster.
    ttp: //helpers/containers/k8s/setup-kubeconfig-for-eks.yaml
    args:
      cluster_name: "{{ .Args.target_cluster }}"
      cluster_region: "{{ .Args.target_region }}"
  {{ end }}

  - name: deploy_headless_vnc
    description: Deploy the headless VNC server in the Kubernetes cluster.
    inline: |
      cat > /tmp/headless-vnc-deployment.yaml <<EOF
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: headless-vnc
        labels:
          application: headless-vnc
      spec:
        replicas: 1
        selector:
          matchLabels:
            application: headless-vnc
        template:
          metadata:
            labels:
              application: headless-vnc
          spec:
            terminationGracePeriodSeconds: 5
            containers:
            - name: headless-vnc
              image: {{ .Args.vnc_image }}
              imagePullPolicy: Always
              args:
                - '--tail-log'
              livenessProbe:
                tcpSocket:
                  port: {{ .Args.vnc_port }}
                initialDelaySeconds: 1
                timeoutSeconds: 1
              readinessProbe:
                httpGet:
                  path: /
                  port: 6901
                  scheme: HTTP
                initialDelaySeconds: 1
                timeoutSeconds: 1
              securityContext:
                runAsUser: 0
      ---
      apiVersion: v1
      kind: Service
      metadata:
        labels:
          application: headless-vnc
        name: headless-vnc
      spec:
        externalName: headless-vnc
        ports:
        - name: vnc-port-tcp
          protocol: TCP
          port: {{ .Args.vnc_port }}
          targetPort: {{ .Args.vnc_port }}
          nodePort: 32002
        selector:
          application: headless-vnc
        type: LoadBalancer
      EOF
      kubectl apply -f /tmp/headless-vnc-deployment.yaml -n {{ .Args.target_ns }}
    cleanup:
      inline: |
        kubectl delete -f /tmp/headless-vnc-deployment.yaml -n {{ .Args.target_ns }}
        rm -rf /tmp/headless-vnc-deployment.yaml

  - name: wait_for_pod_ready
    description: Wait for the VNC pod to be ready.
    inline: |
      while [[ $(kubectl get pods -l application=headless-vnc -n {{ .Args.target_ns }} -o jsonpath='{.items[0].status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do
        echo "Waiting for VNC pod to be ready..."
        sleep 5
      done
      echo "VNC pod is ready."

  - name: access_vnc_server
    description: Attempt to access the VNC server using the weak password.
    inline: |
      VNC_SERVER_IP=$(kubectl get svc headless-vnc -n {{ .Args.target_ns }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
      kubectl port-forward svc/headless-vnc -n {{ .Args.target_ns }} {{ .Args.vnc_port }}:{{ .Args.vnc_port }} &
      PORT_FORWARD_PID=$!
      echo "Attempting to access VNC server at {{ .Args.vnc_server }}:{{ .Args.vnc_port }} with password '{{ .Args.vnc_password }}'"

      echo "Sleeping for 5 seconds to allow port-forward to start..."
      sleep 5

      if [[ "$(uname)" == "Linux" ]]; then
        xdg-open vnc://{{ .Args.vnc_server }}:{{ .Args.vnc_port }}
      elif [[ "$(uname)" == "Darwin" ]]; then
        open vnc://{{ .Args.vnc_username }}:{{ .Args.vnc_password }}@{{ .Args.vnc_server }}:{{ .Args.vnc_port }}
      fi

      # Sleep for 10 seconds to allow the user to interact with the VNC server
      sleep 10

      # We can't put this in the cleanup section unfortunately -
      # it's necessary to ensure the TTP doesn't run indefinitely
      kill $PORT_FORWARD_PID
    cleanup:
      inline: |
        if [[ "$(uname)" == "Darwin" ]]; then
          osascript -e 'tell application "Screen Sharing" to quit'
        fi
