---
name: download-latest-github-release
description: |
  Downloads and extracts the latest release of a specified GitHub repository.
args:
  - name: repo_owner
    description: The GitHub username of the repository owner.
    required: true
  - name: repo_name
    description: The name of the GitHub repository.
    required: true
  - name: release_os
    description: Release Operating System
    type: string
  - name: release_arch
    description: Release Operating System
    type: string
requirements:
  platforms:
    - os: linux
    - os: darwin

steps:
  - name: get_latest_release_info
    description: Get the latest release information from GitHub.
    inline: |
      OS={{ .Args.release_os }}
      ARCH={{ .Args.release_arch }}
      REPO="https://api.github.com/repos/{{ .Args.repo_owner }}/{{ .Args.repo_name }}"
      VERSION=$(curl -s "$REPO/releases/latest" | jq -r '.tag_name')
      FILENAME="{{ .Args.repo_name }}_${VERSION}_${OS}_${ARCH}"
      URL="$REPO/releases/latest/$FILENAME"
      echo "{\"version\":\"$VERSION\",\"url\":\"$URL\",\"filename\":\"$FILENAME\"}"
    outputs:
      version:
        filters:
          - json_path: version
      url:
        filters:
          - json_path: url
      filename:
        filters:
          - json_path: filename

  - name: download_and_extract
    description: Download and extract the release archive or make the binary executable.
    inline: |
      FILENAME=$forge.steps.get_latest_release_info.outputs.filename
      URL=$forge.steps.get_latest_release_info.outputs.url
      echo "Downloading $FILENAME from $URL"
      curl -sL $URL -o $FILENAME
      if [[ $FILENAME == *.tar.gz ]]; then
        echo "Extracting $FILENAME"
        tar -xzf $FILENAME
      elif [[ $FILENAME == *.zip ]]; then
        echo "Extracting $FILENAME"
        unzip $FILENAME
      else
        echo "Making $FILENAME executable"
        chmod +x $FILENAME
      fi

      echo $FILENAME
