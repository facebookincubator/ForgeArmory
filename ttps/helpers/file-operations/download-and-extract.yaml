---
name: download-and-extract
description: |
  Downloads a file from a specified URL or the latest release from a GitHub repository.
  If the file is a .tar.gz or .zip archive, it extracts the contents.
  The helper also sets the specified permissions for the downloaded file or extracted contents.
args:
  - name: download_path
    description: The path to the directory where the file will be downloaded.
    default: "/tmp"
    type: string
  - name: download_url
    description: The URL of the file to download.
    type: string
    default: "https://google.com"
  - name: filename
    description: The name of the file to download.
    type: string
  - name: file_permissions
    description: Permissions for the downloaded file in chmod format.
    default: "755"
    type: string
  - name: github
    description: Whether to download the latest release from GitHub.
    type: bool
    default: false
  - name: repo_owner
    description: The GitHub username of the repository owner.
    default: "facebookincubator"
  - name: repo_name
    description: The name of the GitHub repository.
    default: "ttpforge"
  - name: release_os
    description: Operating System of the release.
    type: string
    default: linux
  - name: release_arch
    description: Architecture of the release.
    type: string
    default: amd64
requirements:
  platforms:
    - os: linux
    - os: darwin

steps:
  - name: get_latest_release_info
    description: Get the latest release information from GitHub.
    inline: |
      if [[ "{{ .Args.github }}" == "true" ]]; then
        OS="{{ .Args.release_os }}"
        ARCH="{{ .Args.release_arch }}"
        REPO="https://api.github.com/repos/{{ .Args.repo_owner }}/{{ .Args.repo_name }}"
        VERSION="$(curl -s "${REPO}/releases/latest" | jq -r '.tag_name')"
        URL=$(curl -s "${REPO}/releases/latest" \
          | jq -r --arg os "$OS" --arg arch "$ARCH" \
          '.assets[] | select(.name | test("_" + $os + ".*" + $arch)) | .browser_download_url')

        if [ -z "$URL" ]; then
            URL=$(curl -s "${REPO}/releases/latest" \
                | jq -r --arg os "$OS" \
                '.assets[] | select(.name | test("_" + $os)) | .browser_download_url')
        fi

        FILENAME="${{ .Args.repo_name }}_${VERSION}_${OS}_${ARCH}"
        echo "{\"url\":\"$URL\",\"filename\":\"$FILENAME\"}"
      else
          # Handle non-github download
          echo "{\"url\":\"{{ .Args.download_url }}\",\"filename\":\"{{ .Args.filename }}\"}"
      fi
    outputs:
      url:
        filters:
          - json_path: url
      filename:
        filters:
          - json_path: filename

  - name: download_and_extract
    description: Download and extract the release archive or make the binary executable.
    inline: |
      FILENAME={{ .Args.filename }}
      URL=$forge.steps.get_latest_release_info.outputs.url

      echo "Downloading $FILENAME from $URL"
      curl -sL $URL -o {{ .Args.download_path }}/$FILENAME

      if [[ $forge.steps.get_latest_release_info.outputs.filename == *.tar.gz ]]; then
        echo "Unarchiving {{ .Args.download_path }}/$FILENAME"
        tar -xzf {{ .Args.download_path }}/$FILENAME -C {{ .Args.download_path }}

        # If the tarball contains a single file or directory, rename it to the desired filename
        CONTENTS=$(tar -tzf {{ .Args.download_path }}/$FILENAME | head -1)
        mv {{ .Args.download_path }}/"$CONTENTS" {{ .Args.download_path }}/$FILENAME
      elif [[ $FILENAME == *.zip ]]; then
        echo "Unarchiving {{ .Args.download_path }}/$forge.steps.get_latest_release_info.outputs.filename"
        unzip {{ .Args.download_path }}/$FILENAME -d {{ .Args.download_path }}
        # If the zip archive contains a single file or directory, rename it to the desired filename
        CONTENTS=$(unzip -l {{ .Args.download_path }}/$FILENAME | awk '/-----/ {p = ++p % 2; next} p {print $4}' | head -1)
        mv {{ .Args.download_path }}/"$CONTENTS" {{ .Args.download_path }}/$FILENAME
      fi

      echo "Setting permissions for {{ .Args.download_path }}/$FILENAME to {{ .Args.file_permissions }}"
      chmod {{ .Args.file_permissions }} {{ .Args.download_path }}/$FILENAME
