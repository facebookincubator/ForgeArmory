---
name: bucket-enum
description: |
  Enumerate open S3 buckets using the [S3Scanner](https://github.com/sa7mon/S3Scanner) tool.
args:
  - name: detect
    description: Detect brute force attacks in CloudTrail logs.
    default: false
  - name: bucket_list
    description: File path to store the list of bucket names.
    default: "/tmp/buckets.txt"
  - name: create_bucket_list
    description: Create a file with the list of bucket names.
    default: true
  - name: region
    description: Region to search for S3 buckets.
    default: us-east-1
  - name: concurrent_processes
    description: Number of concurrent processes to use for scanning.
    default: 4
requirements:
  platforms:
    - os: linux
    - os: darwin
mitre:
  tactics:
    - TA0009 Collection
  techniques:
    - T1530 Data from Cloud Storage Object
  subtechniques:
    - T1530.001 Cloud Storage API

steps:
  - name: aws-connector
    description: This step invokes the setup_cloud_env action.
    ttp: //helpers/cloud/aws/validate-aws-env-configured.yaml
    args:
      region: "{{ .Args.region }}"

  {{ if .Args.create_bucket_list }}
  - name: create_bucket_list
    description: |
      Create a file specified with the `bucket_list` argument and populate it with the names
      of S3 buckets associated with the currently configured AWS credentials.
      Only buckets located in the region specified by the region argument will be included.
    inline: |
      if [[ "{{ .Args.create_bucket_list }}" == "true" ]]; then
        touch "{{ .Args.bucket_list }}"
        aws s3api list-buckets --query "Buckets[].Name" --output json | jq -r '.[]' | while read -r bucket; do
          bucket_region=$(aws s3api get-bucket-location --bucket "$bucket" --output json | jq -r '.LocationConstraint // "us-east-1"')
          if [[ "$bucket_region" == "{{ .Args.region }}" ]]; then
            echo "$bucket" | tee -a "{{ .Args.bucket_list }}"
          fi
        done
      fi
    cleanup:
      inline: |
        if [[ "{{ .Args.create_bucket_list }}" == "true" ]]; then
          rm {{ .Args.bucket_list }}
        fi
  {{ end }}

  - name: provision
    description: "Install necessary tools for bucket enumeration."
    inline: |
      if ! [[ -x "$(command -v s3scanner)" ]]; then
        OS=$(uname | tr '[:upper:]' '[:lower:]')
        ARCH=$(uname -m)
        case $ARCH in
          x86_64) ARCH="amd64" ;;
          arm64) ARCH="arm64" ;;
          *) echo "Unsupported architecture: $ARCH" && exit 1 ;;
        esac

        AUTHOR='sa7mon'
        REPO_NAME='S3Scanner'
        VERSION=$(curl -s "https://api.github.com/repos/$AUTHOR/$REPO_NAME/releases/latest" | jq -r '.tag_name')
        URL=$(curl -s "https://api.github.com/repos/$AUTHOR/$REPO_NAME/releases/latest" \
          | jq -r --arg os "$OS" --arg arch "$ARCH" '.assets[] | select(.name | ascii_downcase | test($os) and test($arch)) | .browser_download_url')
        FILENAME="${REPO_NAME}_${VERSION}_${OS}_${ARCH}.tar.gz"
        echo "Downloading $FILENAME from $URL"
        curl -sL $URL -o $FILENAME
        tar -xzf $FILENAME
      fi
    cleanup:
      inline: |
        if [[ -x "$(command -v s3scanner)" ]]; then
          rm -f "${FILENAME}"
        fi

  - name: bucket-discovery
    description: "Discover S3 buckets using s3scanner."
    inline: s3scanner --endpoint-url "https://s3.{{ .Args.region }}.amazonaws.com" scan -f "{{ .Args.bucket_list }}"

  - name: check-detection
    description: "Check for brute force attacks in CloudTrail logs."
    inline: |
      if [ "{{ .Args.detect }}" == "true" ]; then
        current_time() {
          date -u +'%Y-%m-%dT%H:%M:%SZ'
        }

        ten_minutes_ago() {
          if [[ "$OSTYPE" == "darwin"* ]]; then
            date -v-10M -u +'%Y-%m-%dT%H:%M:%SZ'
          else
            date -u -d '10 minutes ago' +'%Y-%m-%dT%H:%M:%SZ'
          fi
        }

        START_TIME=$(ten_minutes_ago)
        END_TIME=$(current_time)
        EVENT_NAMES=("ListBuckets" "HeadBucket" "ListObjects" "HeadObject")
        for event_name in "${EVENT_NAMES[@]}"; do
          EVENTS=$(aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=$event_name --start-time $START_TIME --end-time $END_TIME)
          if echo "$EVENTS" | jq -e '.Events[] | select(.EventName=="'$event_name'")' > /dev/null; then
            COUNTS=$(echo "$EVENTS" | jq -r '.Events[] | .SourceIPAddress' | sort | uniq -c)
            THRESHOLD=5
            while read -r count ip; do
              if (( count > THRESHOLD )); then
                echo "Possible brute force attack detected from $ip with $count $event_name events in the last 10 minutes"
              fi
            done <<< "$COUNTS"
          else
            echo "No $event_name event detected in the last 10 minutes"
          fi
        done
      fi
